---
############
## UPDATE ##
############

- name: UBUNTU apt-get update and upgrade
  when: ansible_distribution == 'Ubuntu'
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: "{{ upgrade_ubuntu_mode }}"

- name: UBUNTU apt-get autoremove
  when: ansible_distribution == 'Ubuntu'
  shell: "apt-get -y autoremove --purge"

  # Not ready, https://github.com/ansible/ansible-modules-core/issues/4029
  #- name: UBUNTU apt-get autoremove
  #  when: ansible_distribution == 'Ubuntu'
  #  apt: autoremove=yes
  #  notify:
  #  - update grub

- meta: flush_handlers

- name: YUM upgrade all
  when: ansible_os_family == 'RedHat' and must_upgrade_yum
  yum:
    name: '*'
    state: latest

#############
## INSTALL ##
#############

## ADD EPEL (AUTOMATIC MODE)
#- name: EPEL (for Redhat/CentOS/Fedora)
#  yum: name=epel-release state=installed
#  when: ansible_os_family == 'RedHat'

- name: apt-get install system basic tools
  when: ansible_os_family == 'Debian'
  apt:
    name: "{{ item }}"
    state: installed
  with_items:
    - "{{ base_debian_packages }}"

- name: yum install system basic tools
  when: ansible_os_family == 'RedHat'
  yum:
    name: "{{ item }}"
    state: installed
  with_items:
    - "{{ base_redhat_packages }}"

############
## REMOVE ##
############
#- name: yum remove puppet
#  yum: name={{ item }} state=absent
#  when: ansible_os_family == 'RedHat'
#  tags: [ 'package' ]
#  with_items:
#    - puppet
#
#- name: apt-get remove puppet
#  apt: name={{ item }} state=absent
#  when: ansible_os_family == 'Debian'
#  tags: [ 'package' ]
#  with_items:
#    - puppet
# vim:ft=ansible:
